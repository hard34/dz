//Создать двусвязный список, содержащий целые числа. Удалить лишние элементы так, чтобы каждый элемент был не меньше среднего арифметического всех
//элементов, следующих за ним.
#include<iostream>
using namespace std;

struct list { // структура списка
	int inf; // значение
	list* next; // следующий элемент
	list* prev; // предыдущий элемент
};

void push(list*& h, list*& t, int x) { // функция вставки элемента в конец
	list* r = new list; // создаем новый элемент
	r->inf = x; // присваеваем значение
	r->next = NULL; // всегда последний
	if (!h && !t) { // если список пуст
		r->prev = NULL; // первый элемент
		h = r; // голова
	}
	else {
		t->next = r; // r - следующий для хвоста
		r->prev = t; // хвост - предыдущий для r
	}
	t = r; // r теперь хвост
}

void print(list* h, list* t) { // функция печати элементов списка
	list* p = h; // указатель на голову
	cout << "Новый лист: ";
	while (p) { // пока не дошли до конца списка
		cout << p->inf << " "; // печать очередного элемента
		p = p->next; // переход к следующему элементу
	}
}

void deleteNode(list*& h, list*& t, list* r) { // функция удаления элемента после r
	if (r == h && r == t) // если единственный элемент списка
		h = t = NULL;
	else if (r == h) { // если удаляем голову списка
		h = h->next; // сдвигаем голову
		h->prev = NULL;
	}
	else if (r == t) { // если удаляем хвост списка
		t = t->prev; // сдвигаем хвост
		t->next = NULL;
	}
	else {  // Если это не голова и не хвост и не единственный элемент
		r->next->prev = r->prev; // для следующего от r предыдущим становится r->prev
		r->prev->next = r->next; // для прелущего от r следующим становится r->next
	}
	delete r; // удаляем r
}

double average(list* t) { // функция посчета средне арифмитического значения
	list* ptr = t->prev; // переход к следующему элементу
	double sum = 0, n = 0; // объявление переменной
	while (ptr) { // пока 
		sum += ptr ->inf; // прибавление значений
		n++; // увеличение колличества
		ptr = ptr->prev; // переход к следующему элементу
	}
	double mean = sum / n; // вычисление средне арифметического значения
	return mean;
}

list* find(list* h, list* t, int x) { // функция поиска элемента в списке
	list* p = h; // указатель на голову
	while (p) { // пока не дошли до конца списка
		if (p->inf == x) break; // если нашли, прекращаем цикл
		p = p->next; // переход к следующему элементу
	}
	return p; // возвращаем указатель на элемент
}

int main() {
	setlocale(LC_ALL, "RUS"); // подключение русской клавиатуры 
	list* head = NULL, * tail = NULL; // объявление переменных
	int n, temp = 0, w = 0; // объявление переменных
	cout << "Кол-во элементов: ";
	cin >> n; // ввод размера списка
	for (int i = 0; i < n; i++) { // проход всего списка
		cout << "Элемент [" << i << "] = ";
		cin >> temp; // ввод очередного элемента
		push(head, tail, temp); // добавление в конец
	}
	list* tr = tail; // объявление переменной
	while (tr) { // до конца списка
		if (tr->inf < average(tr)) { // если элемент меньше чем средне арифметическое 
			deleteNode(head, tail, tr); // удалить его
			tr = tail; // присваиваем новую голову
		}
		else { // иначе 
			tr = tr->prev; // переходим к следующему элемента
			w++; // увеличиваем счетчик 
		}
	}
	print(head, tail); // вывод списка на экран
	return 0; // возвращение переменной
}